#!/usr/bin/env node

'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var config = require('@babel/core/lib/config');

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var _=require("lodash-magic-cache").lodashFP(["flow","get","find","isEmpty","assign","reduce","assignInWith","concat","uniq","compact","defaults","flatMap","toPairs","map","nth"]);var defaultValidExtensions=[".js",".mjs",".json",".jsx"];var settings={},dependencies=[],pluginOptions=function(a,b){return _.flow(_.get("options.plugins"),_.find({file:{request:a}}),_.get("options"))(b)};var parseJson=function(a,b){try{return JSON.parse(fs.readFileSync("".concat(a,"/").concat(b),{encoding:"utf8"}).toString())}catch(a){return {}}};var defaults={root:[],alias:{},externals:[]};var readSettings=function(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:process.cwd();if(_.isEmpty(settings)){var e="".concat(a,"/.babelrc");try{fs.lstatSync(e).isFile();}catch(a){return defaults}var b=config.loadPartialConfig({root:a,rootMode:"root",configFile:e}),c=pluginOptions("module-resolver",b),d=pluginOptions("resolver",b);d={root:_.get("resolveDirs")(d),alias:_.get("alias")(d),externals:_.get("externals")(d)};settings=_.flow(_.assignInWith(_.flow(_.concat,_.uniq,_.compact)),function b(a){return _.assign(a)({alias:_.reduce(_.assign,{})(a.alias)})},_.defaults(defaults))(c,d);}return settings};var readDependencies=function(){var a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:".";if(_.isEmpty(dependencies)){var b=parseJson(a,"package.json");dependencies=_.flow(_.flatMap(function(a){return _.toPairs(_.get(a)(b))}),_.compact,_.map(_.nth(0)),_.uniq)(["dependencies","peerDependencies","devDependencies"]);}return dependencies};

var _$1=require("lodash-magic-cache").lodashFP(["concat","map","find","reduce","get"]);var fileExists=function(a){var b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:defaultValidExtensions,c=_$1.concat(a,_$1.map(function(b){return "".concat(a).concat(b)})(b));return _$1.find(function(a){try{return fs.lstatSync(a).isFile()}catch(a){return !1}})(c)};var exists=function(a,b){return _$1.reduce(function(a,b){return a?a:b()})(!1)([function(){return fileExists(a,b)},function(){return fileExists(path.join(a,"index"),b)},function(){if(fileExists(path.join(a,"package.json"))){var c=parseJson(a,"package.json"),d=_$1.get("jsnext:main")(c)||_$1.get("main")(c)||null;if(d)return fileExists(path.join(a,d),b)}return !1}])};

var _$2=require("lodash-magic-cache").lodashFP(["includes"]);var coreModules=["assert","async_hooks","buffer_ieee754","buffer","child_process","cluster","console","constants","crypto","_debugger","dgram","dns","domain","events","freelist","fs","_http_agent","_http_client","_http_common","_http_incoming","_http_outgoing","_http_server","http","http2","https","inspector","_linklist","module","net","node-inspect/lib/_inspect","node-inspect/lib/internal/inspect_client","node-inspect/lib/internal/inspect_repl","os","path","perf_hooks","process","punycode","querystring","readline","repl","smalloc","_stream_duplex","_stream_transform","_stream_wrap","_stream_passthrough","_stream_readable","_stream_writable","stream","string_decoder","sys","timers","_tls_common","_tls_legacy","_tls_wrap","tls","tty","url","util","v8/tools/codemap","v8/tools/consarray","v8/tools/csvparser","v8/tools/logreader","v8/tools/profile_view","v8/tools/splaytree","v8","vm","zlib"];function isCore(a){return _$2.includes(a)(coreModules)}

var _$3=require("lodash-magic-cache").lodashFP(["reduce","flow","replace","entries","filter","overEvery","isString","overSome","startsWith","map","compact","nth","find","isEmpty","defaults","get"]);var replaceAliases=function(a,b){return _$3.reduce(function(a,b){var c=_slicedToArray(b,2),d=c[0],e=c[1];return _$3.flow(_$3.replace(new RegExp("^".concat(d)),e),_$3.replace(new RegExp("".concat(d,"$")),e))(a)})(a)(_$3.entries(b))},lookupRelative=function(a,b,c){var d=_$3.replace(/$.\//,"")(a),e=path.join(path.dirname(b),d);return exists(e,c)},lookupExternals=function(a,b){return _$3.filter(_$3.overEvery([_$3.isString,_$3.overSome([function(b){return _$3.startsWith(b)(a)},function(b){return a.match(b)}])]))(b)},lookupRoot=function(a,b,c,d){var e=_$3.map(function(c){return path.join(b,c,a)})(c);return _$3.flow(_$3.map(function(a){return exists(a,d)}),_$3.compact,_$3.nth(0))(e)},lookupDeps=function(a,b,c,d){return !!_$3.find(function(b){return _$3.startsWith(b)(a)})(c)&&exists(path.join(b,"node_modules",a),d)};var resolveAll=function(a,b){var c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{};if(_$3.overSome([_$3.isEmpty,function(a){return !a}])(a))return {found:!1};if(isCore(a))return {found:!0};var d=_$3.flow(_$3.defaults({root:process.cwd(),extensions:defaultValidExtensions}),function(a){return {root:_$3.get("root")(a),validExtensions:_$3.get("extensions")(a)}})(c),e=d.root,f=d.validExtensions,g=readSettings(e,c),h=replaceAliases(a,g.alias),i=readDependencies(e);return _$3.flow(_$3.map(function(a){return _$3.isEmpty(a)?void 0:a}),_$3.compact)([lookupRelative(h,b,f),lookupExternals(h,g.externals),lookupRoot(h,e,g.root,f),lookupDeps(h,e,i,f)])};

var _$4=require("lodash-magic-cache").lodashFP(["filter","forEach","overSome","equals"]);var notExists=function(a){try{return !fs.lstatSync(a).isFile()}catch(a){return !0}},files=_$4.filter(notExists)(process.argv);_$4.forEach(function(a){var b=resolveAll(a,"",{root:process.cwd()});return _$4.overSome([_$4.equals({found:!1}),_$4.equals([])])(b)?void console.log("".concat(a," not found")):void// eslint-disable-next-line no-console
console.log("resolved ".concat(a," to ").concat(b))})(files);
//# sourceMappingURL=resolve.min.js.map
